# -*- coding: utf-8 -*-
"""project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DSTG6ikQQuPbTVE78WmzZqP4kLPrDdWK
"""

# disease_prediction_app.py
!pip install gradio
!pip install pandas numpy matplotlib seaborn scikit-learn xgboost gradio joblib
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import joblib
import gradio as gr

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
import xgboost as xgb

# 1. Load Dataset
# Replace 'path_to_dataset.csv' with your actual dataset path
df = pd.read_csv('path_to_dataset.csv')

# 2. Data Preprocessing
# Handle missing values
df.dropna(inplace=True)

# Encode categorical variables
categorical_cols = df.select_dtypes(include=['object']).columns
for col in categorical_cols:
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col])

# Feature-target split
X = df.drop('target', axis=1)  # Replace 'target' with your actual target column name
y = df['target']

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Feature scaling
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# 3. Model Training
# Logistic Regression
lr = LogisticRegression()
lr.fit(X_train, y_train)

# Random Forest
rf = RandomForestClassifier(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)

# XGBoost
xgb_model = xgb.XGBClassifier(use_label_encoder=False, eval_metric='logloss')
xgb_model.fit(X_train, y_train)

# 4. Model Evaluation
models = {'Logistic Regression': lr, 'Random Forest': rf, 'XGBoost': xgb_model}

for name, model in models.items():
    y_pred = model.predict(X_test)
    print(f"\n{name} Classification Report:")
    print(classification_report(y_test, y_pred))
    print(f"{name} ROC AUC Score: {roc_auc_score(y_test, model.predict_proba(X_test), multi_class='ovr'):.2f}")

# 5. Save the best model (e.g., XGBoost)
joblib.dump(xgb_model, 'best_model.pkl')
joblib.dump(scaler, 'scaler.pkl')

# 6. Gradio Interface
def predict_disease(*inputs):
    # Load the saved model and scaler
    model = joblib.load('best_model.pkl')
    scaler = joblib.load('scaler.pkl')

    # Convert inputs to numpy array and reshape
    input_data = np.array(inputs).reshape(1, -1)

    # Scale the input data
    input_data_scaled = scaler.transform(input_data)

    # Make prediction
    prediction = model.predict(input_data_scaled)

    # Map prediction to disease name (modify as per your target encoding)
    disease_mapping = {0: 'Disease A', 1: 'Disease B', 2: 'Disease C'}  # Replace with actual mappings
    return disease_mapping.get(prediction[0], "Unknown Disease")

# Define input components based on your dataset features
# Replace with actual feature names and appropriate input types
input_components = [
    gr.Number(label="Feature 1"),
    gr.Number(label="Feature 2"),
    gr.Number(label="Feature 3"),
    # Add more features as needed
]

# Create Gradio interface
interface = gr.Interface(
    fn=predict_disease,
    inputs=input_components,
    outputs=gr.Textbox(label="Predicted Disease"),
    title="AI-Powered Disease Prediction",
    description="Enter patient data to predict the likelihood of a disease."
)

# Launch the interface
interface.launch()